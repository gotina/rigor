{"ast":null,"code":"var _jsxFileName = \"/Users/tbaggett/Development/rigor/src/App.js\";\nimport React from 'react';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport CurrentWeather from './components/CurrentWeather';\nimport FiveDayForecast from './components/FiveDayForecast';\nimport './App.css';\nconst APPID = '8c3e7fd0f6ec033c8ecf4379bb4cce9d';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      latitude: null,\n      longitude: null\n    };\n\n    this.success = position => {\n      const lat = position.coords.latitude;\n      const lon = position.coords.longitude;\n      Promise.all([fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&APPID=${APPID}`) // fetch(\"http://localhost:3000/contactlist/get\"),\n      // fetch(\"http://localhost:3000/itemgroup/get\")\n      ]).then(function (responses) {\n        // Get a JSON object from each of the responses\n        return responses.map(function (response) {\n          return response.json();\n        });\n      }).then(function (data) {\n        // Log the data to the console\n        // You would do something with both sets of data here\n        console.log(data);\n      }).catch(function (error) {\n        // if there's an error, log it\n        console.log(error);\n      }); // .then(([weather]) => {\n      //   console.log('***********', weather.json())\n      // }).catch((err) => {\n      //     console.log(err);\n      // });\n    };\n  }\n\n  componentDidMount() {\n    if (!navigator.geolocation) {// status.textContent = 'Geolocation is not supported by your browser';\n    } else {\n      // status.textContent = 'Locating…';\n      navigator.geolocation.getCurrentPosition(this.success, this.error);\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(Col, {\n      sm: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(CurrentWeather, {\n      OWMKey: APPID,\n      lat: this.state.latitude,\n      lon: this.state.longitude,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    })), React.createElement(Col, {\n      sm: 8,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(FiveDayForecast, {\n      OWMKey: APPID,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/tbaggett/Development/rigor/src/App.js"],"names":["React","Container","Row","Col","CurrentWeather","FiveDayForecast","APPID","App","Component","state","latitude","longitude","success","position","lat","coords","lon","Promise","all","fetch","then","responses","map","response","json","data","console","log","catch","error","componentDidMount","navigator","geolocation","getCurrentPosition","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,SAAT,EAAoBC,GAApB,EAAyBC,GAAzB,QAAoC,iBAApC;AACA,OAAOC,cAAP,MAA2B,6BAA3B;AACA,OAAOC,eAAP,MAA4B,8BAA5B;AACA,OAAO,WAAP;AAEA,MAAMC,KAAK,GAAG,kCAAd;;AAEA,MAAMC,GAAN,SAAkBP,KAAK,CAACQ,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAChCC,KADgC,GACxB;AACNC,MAAAA,QAAQ,EAAE,IADJ;AAENC,MAAAA,SAAS,EAAE;AAFL,KADwB;;AAAA,SAehCC,OAfgC,GAerBC,QAAD,IAAc;AACtB,YAAMC,GAAG,GAAGD,QAAQ,CAACE,MAAT,CAAgBL,QAA5B;AACA,YAAMM,GAAG,GAAGH,QAAQ,CAACE,MAAT,CAAgBJ,SAA5B;AAEAM,MAAAA,OAAO,CAACC,GAAR,CAAY,CACVC,KAAK,CAAE,uDAAsDL,GAAI,QAAOE,GAAI,UAASV,KAAM,EAAtF,CADK,CAEV;AACA;AAHU,OAAZ,EAKCc,IALD,CAKM,UAAUC,SAAV,EAAqB;AACzB;AACA,eAAOA,SAAS,CAACC,GAAV,CAAc,UAAUC,QAAV,EAAoB;AACvC,iBAAOA,QAAQ,CAACC,IAAT,EAAP;AACD,SAFM,CAAP;AAGD,OAVD,EAWCJ,IAXD,CAWM,UAAUK,IAAV,EAAgB;AACpB;AACA;AACCC,QAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACF,OAfD,EAgBCG,KAhBD,CAgBO,UAAUC,KAAV,EAAiB;AACtB;AACAH,QAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;AACD,OAnBD,EAJsB,CA2BtB;AAEA;AACA;AACA;AACA;AACD,KAhD+B;AAAA;;AAMhCC,EAAAA,iBAAiB,GAAG;AAClB,QAAI,CAACC,SAAS,CAACC,WAAf,EAA4B,CAC1B;AACD,KAFD,MAEO;AACL;AACAD,MAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyC,KAAKrB,OAA9C,EAAuD,KAAKiB,KAA5D;AACD;AACF;;AAqCDK,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAY,oBAAC,cAAD;AAAgB,MAAA,MAAM,EAAE5B,KAAxB;AAA+B,MAAA,GAAG,EAAE,KAAKG,KAAL,CAAWC,QAA/C;AAAyD,MAAA,GAAG,EAAE,KAAKD,KAAL,CAAWE,SAAzE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAZ,CADF,EAEE,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAY,oBAAC,eAAD;AAAiB,MAAA,MAAM,EAAEL,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAZ,CAFF,CADF,CADF,CADF;AAUD;;AA7D+B;;AAgElC,eAAeC,GAAf","sourcesContent":["import React from 'react';\n\nimport { Container, Row, Col } from 'react-bootstrap'\nimport CurrentWeather from './components/CurrentWeather';\nimport FiveDayForecast from './components/FiveDayForecast';\nimport './App.css';\n\nconst APPID = '8c3e7fd0f6ec033c8ecf4379bb4cce9d';\n\nclass App extends React.Component {\n  state = {\n    latitude: null,\n    longitude: null,\n  }\n\n  componentDidMount() {\n    if (!navigator.geolocation) {\n      // status.textContent = 'Geolocation is not supported by your browser';\n    } else {\n      // status.textContent = 'Locating…';\n      navigator.geolocation.getCurrentPosition(this.success, this.error);\n    }\n  }\n\n  success = (position) => {\n    const lat = position.coords.latitude;\n    const lon = position.coords.longitude;\n\n    Promise.all([\n      fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&APPID=${APPID}`),\n      // fetch(\"http://localhost:3000/contactlist/get\"),\n      // fetch(\"http://localhost:3000/itemgroup/get\")\n    ])\n    .then(function (responses) {\n      // Get a JSON object from each of the responses\n      return responses.map(function (response) {\n        return response.json();\n      });\n    })\n    .then(function (data) {\n      // Log the data to the console\n      // You would do something with both sets of data here\n       console.log(data);\n    })\n    .catch(function (error) {\n      // if there's an error, log it\n      console.log(error);\n    });\n    \n    \n    \n    // .then(([weather]) => {\n\n    //   console.log('***********', weather.json())\n    // }).catch((err) => {\n    //     console.log(err);\n    // });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Container>\n          <Row>\n            <Col sm={4}><CurrentWeather OWMKey={APPID} lat={this.state.latitude} lon={this.state.longitude} /></Col>\n            <Col sm={8}><FiveDayForecast OWMKey={APPID} /></Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}