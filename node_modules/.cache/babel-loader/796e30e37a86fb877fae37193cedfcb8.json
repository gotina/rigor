{"ast":null,"code":"var _jsxFileName = \"/Users/tbaggett/Development/rigor/src/App.js\";\nimport React from 'react';\nimport { Container, Row, Col, Card, Spinner } from 'react-bootstrap';\nimport CurrentWeather from './components/CurrentWeather';\nimport FiveDayForecast from './components/FiveDayForecast';\nimport './App.css';\nconst APPID = '8c3e7fd0f6ec033c8ecf4379bb4cce9d';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      latitude: null,\n      longitude: null,\n      weather: null,\n      forecast: null,\n      geolocation: null\n    };\n\n    this.success = position => {\n      const lat = position.coords.latitude;\n      const lon = position.coords.longitude;\n      Promise.all([fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=imperial&APPID=${APPID}`), fetch(`https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&&units=imperial&APPID=${APPID}`)]).then(async ([weather, forecast]) => {\n        const current = await weather.json();\n        const future = await forecast.json();\n        return [current, future];\n      }).then(response => {\n        this.setState({\n          weather: response[0]\n        });\n        this.setState({\n          forecast: response[1]\n        });\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n  }\n\n  componentDidMount() {\n    if (!navigator.geolocation) {\n      this.setState({\n        geolocation: 'Geolocation is not supported by your browser'\n      });\n    } else {\n      this.setState({\n        geolocation: 'Locating…'\n      });\n      navigator.geolocation.getCurrentPosition(this.success, this.error);\n    }\n  }\n\n  render() {\n    if (!this.state.geolocation) {\n      return React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, React.createElement(Card.Body, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, React.createElement(Spinner, {\n        animation: \"border\",\n        role: \"status\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"sr-only\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, \"Loading...\")), React.createElement(Card.Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, this.state.geolocation)));\n    }\n\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(Col, {\n      sm: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(CurrentWeather, {\n      OWMKey: APPID,\n      weather: this.state.weather,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    })), React.createElement(Col, {\n      sm: 8,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(FiveDayForecast, {\n      OWMKey: APPID,\n      forecast: this.state.forecast,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/tbaggett/Development/rigor/src/App.js"],"names":["React","Container","Row","Col","Card","Spinner","CurrentWeather","FiveDayForecast","APPID","App","Component","state","latitude","longitude","weather","forecast","geolocation","success","position","lat","coords","lon","Promise","all","fetch","then","current","json","future","response","setState","catch","err","console","log","componentDidMount","navigator","getCurrentPosition","error","render"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport { Container, Row, Col, Card, Spinner } from 'react-bootstrap'\nimport CurrentWeather from './components/CurrentWeather';\nimport FiveDayForecast from './components/FiveDayForecast';\nimport './App.css';\n\nconst APPID = '8c3e7fd0f6ec033c8ecf4379bb4cce9d';\n\nclass App extends React.Component {\n  state = {\n    latitude: null,\n    longitude: null,\n    weather: null,\n    forecast: null,\n    geolocation: null\n  }\n\n  componentDidMount() {\n    if (!navigator.geolocation) {\n      this.setState({ geolocation: 'Geolocation is not supported by your browser' });\n    } else {\n      this.setState({ geolocation: 'Locating…' });\n      navigator.geolocation.getCurrentPosition(this.success, this.error);\n    }\n  }\n\n  success = (position) => {\n    const lat = position.coords.latitude;\n    const lon = position.coords.longitude;\n\n    Promise.all([\n      fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=imperial&APPID=${APPID}`),\n      fetch(`https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&&units=imperial&APPID=${APPID}`),\n    ])\n    .then(async([weather, forecast]) => {\n      const current = await weather.json();\n      const future = await forecast.json();\n      return [current, future]\n    })   \n    .then((response) => {\n      this.setState({ weather: response[0] });\n      this.setState({ forecast: response[1] })\n    }).catch((err) => {\n      console.log(err);\n    });\n  }\n\n  render() {\n    if (!this.state.geolocation) {\n      return (\n        <Card>\n          <Card.Body>\n            <Spinner animation=\"border\" role=\"status\">\n              <span className=\"sr-only\">Loading...</span>\n            </Spinner>\n            <Card.Text>{ this.state.geolocation }</Card.Text>\n          </Card.Body>\n        </Card>\n      )\n    }\n\n    return (\n      <div className=\"App\">\n        \n        <Container>\n          <Row>\n            <Col sm={4}><CurrentWeather OWMKey={APPID} weather={this.state.weather} /></Col>\n            <Col sm={8}><FiveDayForecast OWMKey={APPID} forecast={this.state.forecast}/></Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}