{"ast":null,"code":"var _jsxFileName = \"/Users/tbaggett/Development/rigor/src/App.js\";\nimport React from 'react';\nimport { Container, Row, Col, Card, Spinner } from 'react-bootstrap';\nimport CurrentWeather from './components/CurrentWeather';\nimport FiveDayForecast from './components/FiveDayForecast';\nimport './App.css';\nconst APPID = '8c3e7fd0f6ec033c8ecf4379bb4cce9d';\nconst InitialState = {\n  latitude: null,\n  longitude: null,\n  weather: null,\n  forecast: null\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.success = position => {\n      const lat = position.coords.latitude;\n      const lon = position.coords.longitude;\n      Promise.all([fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=imperial&APPID=${APPID}`), fetch(`https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&&units=imperial&APPID=${APPID}`)]).then(async ([weather, forecast]) => {\n        const current = await weather.json();\n        const future = await forecast.json();\n        return [current, future];\n      }).then(response => {\n        this.setState({\n          weather: response[0]\n        });\n        this.setState({\n          forecast: response[1]\n        });\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.error = () => {\n      alert('Unable to retrieve your location');\n    };\n\n    this.state = localStorage.getItem(\"appState\") ? JSON.parse(localStorage.getItem(\"appState\")) : InitialState;\n  }\n\n  componentDidMount() {\n    if (!navigator.geolocation) {\n      alert('Geolocation is not supported by your browser');\n    } else {\n      navigator.geolocation.getCurrentPosition(this.success, this.error);\n    }\n  }\n\n  componentWillUnmount() {\n    localStorage.setItem('appState', JSON.stringify(this.state));\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(Col, {\n      sm: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(CurrentWeather, {\n      OWMKey: APPID,\n      weather: this.state.weather,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    })), React.createElement(Col, {\n      sm: 8,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(FiveDayForecast, {\n      OWMKey: APPID,\n      forecast: this.state.forecast,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/tbaggett/Development/rigor/src/App.js"],"names":["React","Container","Row","Col","Card","Spinner","CurrentWeather","FiveDayForecast","APPID","InitialState","latitude","longitude","weather","forecast","App","Component","constructor","props","success","position","lat","coords","lon","Promise","all","fetch","then","current","json","future","response","setState","catch","err","console","log","error","alert","state","localStorage","getItem","JSON","parse","componentDidMount","navigator","geolocation","getCurrentPosition","componentWillUnmount","setItem","stringify","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,SAAT,EAAoBC,GAApB,EAAyBC,GAAzB,EAA8BC,IAA9B,EAAoCC,OAApC,QAAmD,iBAAnD;AACA,OAAOC,cAAP,MAA2B,6BAA3B;AACA,OAAOC,eAAP,MAA4B,8BAA5B;AACA,OAAO,WAAP;AAEA,MAAMC,KAAK,GAAG,kCAAd;AACA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAE,IADS;AAEjBC,EAAAA,SAAS,EAAE,IAFM;AAGjBC,EAAAA,OAAO,EAAE,IAHQ;AAIjBC,EAAAA,QAAQ,EAAE;AAJO,CAArB;;AAOA,MAAMC,GAAN,SAAkBd,KAAK,CAACe,SAAxB,CAAkC;AAChCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAiBnBC,OAjBmB,GAiBRC,QAAD,IAAc;AACtB,YAAMC,GAAG,GAAGD,QAAQ,CAACE,MAAT,CAAgBX,QAA5B;AACA,YAAMY,GAAG,GAAGH,QAAQ,CAACE,MAAT,CAAgBV,SAA5B;AAEAY,MAAAA,OAAO,CAACC,GAAR,CAAY,CACVC,KAAK,CAAE,uDAAsDL,GAAI,QAAOE,GAAI,yBAAwBd,KAAM,EAArG,CADK,EAEViB,KAAK,CAAE,wDAAuDL,GAAI,QAAOE,GAAI,0BAAyBd,KAAM,EAAvG,CAFK,CAAZ,EAICkB,IAJD,CAIM,OAAM,CAACd,OAAD,EAAUC,QAAV,CAAN,KAA8B;AAClC,cAAMc,OAAO,GAAG,MAAMf,OAAO,CAACgB,IAAR,EAAtB;AACA,cAAMC,MAAM,GAAG,MAAMhB,QAAQ,CAACe,IAAT,EAArB;AACA,eAAO,CAACD,OAAD,EAAUE,MAAV,CAAP;AACD,OARD,EASCH,IATD,CASOI,QAAD,IAAc;AAClB,aAAKC,QAAL,CAAc;AAAEnB,UAAAA,OAAO,EAAEkB,QAAQ,CAAC,CAAD;AAAnB,SAAd;AACA,aAAKC,QAAL,CAAc;AAAElB,UAAAA,QAAQ,EAAEiB,QAAQ,CAAC,CAAD;AAApB,SAAd;AACD,OAZD,EAYGE,KAZH,CAYUC,GAAD,IAAS;AAChBC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,OAdD;AAeD,KApCkB;;AAAA,SAsCnBG,KAtCmB,GAsCX,MAAM;AACZC,MAAAA,KAAK,CAAC,kCAAD,CAAL;AACD,KAxCkB;;AAEjB,SAAKC,KAAL,GAAaC,YAAY,CAACC,OAAb,CAAqB,UAArB,IAAmCC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAX,CAAnC,GAAkF/B,YAA/F;AACD;;AAEDkC,EAAAA,iBAAiB,GAAG;AAClB,QAAI,CAACC,SAAS,CAACC,WAAf,EAA4B;AAC1BR,MAAAA,KAAK,CAAC,8CAAD,CAAL;AACD,KAFD,MAEO;AACLO,MAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyC,KAAK5B,OAA9C,EAAuD,KAAKkB,KAA5D;AACD;AACF;;AAEDW,EAAAA,oBAAoB,GAAG;AACrBR,IAAAA,YAAY,CAACS,OAAb,CAAqB,UAArB,EAAiCP,IAAI,CAACQ,SAAL,CAAe,KAAKX,KAApB,CAAjC;AACD;;AA2BDY,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAY,oBAAC,cAAD;AAAgB,MAAA,MAAM,EAAE1C,KAAxB;AAA+B,MAAA,OAAO,EAAE,KAAK8B,KAAL,CAAW1B,OAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAZ,CADF,EAEE,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAY,oBAAC,eAAD;AAAiB,MAAA,MAAM,EAAEJ,KAAzB;AAAgC,MAAA,QAAQ,EAAE,KAAK8B,KAAL,CAAWzB,QAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAZ,CAFF,CADF,CADF,CADF;AAUD;;AAtD+B;;AAyDlC,eAAeC,GAAf","sourcesContent":["import React from 'react';\n\nimport { Container, Row, Col, Card, Spinner } from 'react-bootstrap'\nimport CurrentWeather from './components/CurrentWeather';\nimport FiveDayForecast from './components/FiveDayForecast';\nimport './App.css';\n\nconst APPID = '8c3e7fd0f6ec033c8ecf4379bb4cce9d';\nconst InitialState = {\n  latitude: null,\n    longitude: null,\n    weather: null,\n    forecast: null,\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = localStorage.getItem(\"appState\") ? JSON.parse(localStorage.getItem(\"appState\")) : InitialState;\n  }\n\n  componentDidMount() {\n    if (!navigator.geolocation) {\n      alert('Geolocation is not supported by your browser');\n    } else {\n      navigator.geolocation.getCurrentPosition(this.success, this.error);\n    }\n  }\n\n  componentWillUnmount() {\n    localStorage.setItem('appState', JSON.stringify(this.state));\n  }\n\n  success = (position) => {\n    const lat = position.coords.latitude;\n    const lon = position.coords.longitude;\n\n    Promise.all([\n      fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=imperial&APPID=${APPID}`),\n      fetch(`https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&&units=imperial&APPID=${APPID}`),\n    ])\n    .then(async([weather, forecast]) => {\n      const current = await weather.json();\n      const future = await forecast.json();\n      return [current, future]\n    })   \n    .then((response) => {\n      this.setState({ weather: response[0] });\n      this.setState({ forecast: response[1] })\n    }).catch((err) => {\n      console.log(err);\n    });\n  }\n\n  error = () => {\n    alert('Unable to retrieve your location');\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Container>\n          <Row>\n            <Col sm={4}><CurrentWeather OWMKey={APPID} weather={this.state.weather} /></Col>\n            <Col sm={8}><FiveDayForecast OWMKey={APPID} forecast={this.state.forecast}/></Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}