{"ast":null,"code":"var _jsxFileName = \"/Users/tbaggett/Development/rigor/src/components/FiveDayForecast.js\";\nimport React from 'react';\nimport { Card, Spinner } from 'react-bootstrap';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\n\nfunction CurrentWeather(props) {\n  console.log(props);\n\n  if (!props.forecast) {\n    return React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 10\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11\n      },\n      __self: this\n    }, React.createElement(Spinner, {\n      animation: \"border\",\n      role: \"status\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"sr-only\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13\n      },\n      __self: this\n    }, \"Loading...\")), React.createElement(Card.Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }, \"Loading current weather conditions...\")));\n  }\n\n  const extractMaxTemps = data => {\n    const tempArray = [],\n          maxsArray = [];\n\n    for (const property in data) {\n      tempArray.push(data[property].main.temp_max);\n    }\n\n    const chunkedArray = chunkArrayInGroups(tempArray, 7);\n\n    for (let i = 0; i < chunkedArray.length; i++) {\n      let slice = chunkedArray[i];\n      maxsArray.push(Math.max(...slice));\n    }\n\n    return maxsArray;\n  };\n\n  const extractMinTemps = data => {\n    const tempArray = [],\n          minsArray = [];\n\n    for (const property in data) {\n      tempArray.push(data[property].main.temp_min);\n    }\n\n    const chunkedArray = chunkArrayInGroups(tempArray, 7);\n\n    for (let i = 0; i < chunkedArray.length; i++) {\n      let slice = chunkedArray[i];\n      minsArray.push(Math.min(...slice));\n    }\n\n    return minsArray;\n  };\n\n  const extractDates = data => {\n    const dates = [],\n          datesArray = [];\n\n    for (const property in data) {\n      dates.push(new Date(data[property].dt_txt));\n    }\n\n    const chunkedArray = chunkArrayInGroups(dates, 7);\n\n    for (let i = 0; i < chunkedArray.length; i++) {\n      let slice = chunkedArray[i];\n      datesArray.push(slice.slice(0, 0));\n    }\n\n    console.log(\"++++++++\", datesArray);\n    console.log(\"_________\", datesArray);\n    return dates;\n  };\n\n  function chunkArrayInGroups(arr, size) {\n    var averageArray = [];\n\n    for (let i = 0; i < arr.length; i += size) {\n      averageArray.push(arr.slice(i, i + size));\n    }\n\n    return averageArray;\n  }\n\n  const options = {\n    chart: {\n      type: 'spline'\n    },\n    title: {\n      text: props.forecast.city.name\n    },\n    subtitle: {\n      text: '5 Day Forecast'\n    },\n    xAxis: {\n      categories: extractDates(props.forecast.list),\n      labels: {\n        format: '{value: %e.%b}'\n      }\n    },\n    yAxis: {\n      title: {\n        text: 'Temperature'\n      },\n      labels: {\n        formatter: function () {\n          return this.value + 'Â°';\n        }\n      }\n    },\n    tooltip: {\n      crosshairs: true,\n      shared: true\n    },\n    plotOptions: {\n      spline: {\n        marker: {\n          radius: 4,\n          lineColor: '#666666',\n          lineWidth: 1\n        }\n      }\n    },\n    series: [{\n      name: 'Max',\n      data: extractMaxTemps(props.forecast.list)\n    }, {\n      name: 'Min',\n      data: extractMinTemps(props.forecast.list)\n    }]\n  };\n  return React.createElement(Card, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, React.createElement(Card.Body, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, React.createElement(HighchartsReact, {\n    highcharts: Highcharts,\n    options: options,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  })));\n}\n\nexport default CurrentWeather;","map":{"version":3,"sources":["/Users/tbaggett/Development/rigor/src/components/FiveDayForecast.js"],"names":["React","Card","Spinner","Highcharts","HighchartsReact","CurrentWeather","props","console","log","forecast","extractMaxTemps","data","tempArray","maxsArray","property","push","main","temp_max","chunkedArray","chunkArrayInGroups","i","length","slice","Math","max","extractMinTemps","minsArray","temp_min","min","extractDates","dates","datesArray","Date","dt_txt","arr","size","averageArray","options","chart","type","title","text","city","name","subtitle","xAxis","categories","list","labels","format","yAxis","formatter","value","tooltip","crosshairs","shared","plotOptions","spline","marker","radius","lineColor","lineWidth","series"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Card, Spinner } from 'react-bootstrap';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\n\nfunction CurrentWeather(props) {\n  console.log(props)\n    if (!props.forecast) {\n        return (\n          <Card>\n            <Card.Body>\n                <Spinner animation=\"border\" role=\"status\">\n                <span className=\"sr-only\">Loading...</span>\n                </Spinner>\n                <Card.Text>Loading current weather conditions...</Card.Text>\n            </Card.Body>\n          </Card>\n        )\n    }\n\n    const extractMaxTemps = (data) => {\n      const tempArray = [], maxsArray = [];\n\n      for (const property in data) {\n        tempArray.push(data[property].main.temp_max);\n      }\n\n      const chunkedArray = chunkArrayInGroups(tempArray, 7);\n\n      for (let i = 0; i < chunkedArray.length; i++) { \n        let slice = chunkedArray[i];\n        maxsArray.push(Math.max(...slice)); \n      } \n      return maxsArray;\n    }\n\n    const extractMinTemps = (data) => {\n      const tempArray = [], minsArray = [];\n\n      for (const property in data) {\n        tempArray.push(data[property].main.temp_min);\n      }\n\n      const chunkedArray = chunkArrayInGroups(tempArray, 7);\n\n      for (let i = 0; i < chunkedArray.length; i++) { \n        let slice = chunkedArray[i];\n        minsArray.push(Math.min(...slice)); \n      } \n      return minsArray;\n    }\n\n    const extractDates = (data) => {\n      const dates = [], datesArray = [];\n\n      for (const property in data) {\n        dates.push(new Date(data[property].dt_txt));\n      }\n      \n      const chunkedArray = chunkArrayInGroups(dates,7);\n      for (let i = 0; i < chunkedArray.length; i++) { \n        let slice = chunkedArray[i];\n        datesArray.push(slice.slice(0,0)); \n      } \n      console.log(\"++++++++\", datesArray)\n      console.log(\"_________\", datesArray)\n      return dates;\n    }\n\n    function chunkArrayInGroups(arr, size) {\n      var averageArray = [];\n      for(let i = 0; i < arr.length; i += size) {\n        averageArray.push(arr.slice(i, i+size));\n      }\n\n      return averageArray;\n    }\n \n    const options = {\n        chart: {\n            type: 'spline'\n        },\n        title: {\n            text: props.forecast.city.name\n        },\n        subtitle: {\n            text: '5 Day Forecast'\n        },\n        xAxis: {\n            categories: extractDates(props.forecast.list),\n            labels: {\n              format: '{value: %e.%b}'\n            }\n        },\n        yAxis: {\n            title: {\n                text: 'Temperature'\n            },\n            labels: {\n                formatter: function () {\n                    return this.value + 'Â°';\n                }\n            }\n        },\n        tooltip: {\n            crosshairs: true,\n            shared: true\n        },\n        plotOptions: {\n            spline: {\n                marker: {\n                    radius: 4,\n                    lineColor: '#666666',\n                    lineWidth: 1\n                }\n            }\n        },\n        series: [{\n            name: 'Max',\n            data: extractMaxTemps(props.forecast.list)\n        }, {\n          name: 'Min',\n          data: extractMinTemps(props.forecast.list)\n        }]\n      }\n    \n    return (\n    <Card>\n        <Card.Body>\n            <HighchartsReact\n                highcharts={Highcharts}\n                options={options}\n            />\n        </Card.Body>\n    </Card>\n    );\n}\n\nexport default CurrentWeather;\n"]},"metadata":{},"sourceType":"module"}