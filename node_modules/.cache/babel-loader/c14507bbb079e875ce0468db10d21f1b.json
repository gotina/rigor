{"ast":null,"code":"var _jsxFileName = \"/Users/tbaggett/Development/rigor/src/components/FiveDayForecast.js\";\nimport React from 'react';\nimport { Card, Spinner } from 'react-bootstrap';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\n\nfunction CurrentWeather(props) {\n  console.log(props);\n  const ticks = [];\n\n  if (!props.forecast) {\n    return React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13\n      },\n      __self: this\n    }, React.createElement(Spinner, {\n      animation: \"border\",\n      role: \"status\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"sr-only\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }, \"Loading...\")), React.createElement(Card.Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }, \"Loading weather forecast...\")));\n  }\n\n  const getTemps = data => {\n    const tempArray = [];\n\n    for (const property in data) {\n      tempArray.push(data[property].main.temp);\n    }\n\n    return tempArray;\n  };\n\n  const getDates = data => {\n    const dates = [];\n    data.forEach((property, index) => {\n      if (property.dt_txt.includes(\"0:00:00\")) {\n        ticks.push(index);\n      }\n\n      dates.push(property.dt_txt);\n    });\n    return dates;\n  };\n\n  const getIcons = data => {};\n\n  const options = {\n    chart: {\n      type: 'spline'\n    },\n    title: {\n      text: props.forecast.city.name\n    },\n    subtitle: {\n      text: 'Hourly 5 Day Forecast'\n    },\n    xAxis: {\n      categories: getDates(props.forecast.list),\n      tickPositions: ticks,\n      labels: {\n        align: 'left',\n        x: 3,\n        y: 16,\n        format: '{value: %e %b}'\n      },\n      gridLineWidth: 1\n    },\n    yAxis: {\n      title: {\n        text: 'Temperature'\n      },\n      labels: {\n        formatter: function () {\n          return this.value + '째';\n        }\n      },\n      gridLineWidth: 0\n    },\n    tooltip: {\n      crosshairs: true,\n      useHTML: true,\n      formatter: function () {\n        let result = props.forecast.list.filter(obj => {\n          return obj.dt_txt === this.x;\n        });\n        const path = `https://openweathermap.org/img/wn/${result[0].weather[0].icon}.png`;\n        const img = `<img src = \"${path}\"/>`;\n        return '<center>' + '<b>' + this.x + '</b><br />' + img + '<br />' + 'Temperature: ' + this.y + '째< br/>' + '</center>';\n      }\n    },\n    plotOptions: {\n      spline: {\n        marker: {\n          enabled: false\n        }\n      }\n    },\n    series: [{\n      name: 'Temperature',\n      data: getTemps(props.forecast.list)\n    }]\n  };\n  return React.createElement(Card, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, React.createElement(Card.Body, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, React.createElement(HighchartsReact, {\n    highcharts: Highcharts,\n    options: options,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  })));\n}\n\nexport default CurrentWeather;","map":{"version":3,"sources":["/Users/tbaggett/Development/rigor/src/components/FiveDayForecast.js"],"names":["React","Card","Spinner","Highcharts","HighchartsReact","CurrentWeather","props","console","log","ticks","forecast","getTemps","data","tempArray","property","push","main","temp","getDates","dates","forEach","index","dt_txt","includes","getIcons","options","chart","type","title","text","city","name","subtitle","xAxis","categories","list","tickPositions","labels","align","x","y","format","gridLineWidth","yAxis","formatter","value","tooltip","crosshairs","useHTML","result","filter","obj","path","weather","icon","img","plotOptions","spline","marker","enabled","series"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Card, Spinner } from 'react-bootstrap';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\n\nfunction CurrentWeather(props) {\n  console.log(props)\n  const ticks = [];\n\n    if (!props.forecast) {\n        return (\n          <Card>\n            <Card.Body>\n                <Spinner animation=\"border\" role=\"status\">\n                <span className=\"sr-only\">Loading...</span>\n                </Spinner>\n                <Card.Text>Loading weather forecast...</Card.Text>\n            </Card.Body>\n          </Card>\n        )\n    }\n\n    const getTemps = (data) => {\n      const tempArray = [];\n\n      for (const property in data) {\n        tempArray.push(data[property].main.temp);\n      }\n\n      return tempArray;\n    }\n\n    const getDates = (data) => {\n      const dates = [];\n\n      data.forEach((property, index) => {\n        if ((property.dt_txt).includes(\"0:00:00\")) {\n          ticks.push(index);\n        }\n\n        dates.push(property.dt_txt);\n      });\n\n      return dates;\n    }\n\n    const getIcons = (data) => {\n\n    }\n\n    const options = {\n      chart: {\n          type: 'spline'\n      },\n      title: {\n          text: props.forecast.city.name\n      },\n      subtitle: {\n          text: 'Hourly 5 Day Forecast'\n      },\n      xAxis: {\n          categories: getDates(props.forecast.list),\n          tickPositions: ticks,\n          labels: {\n            align: 'left',\n            x: 3,\n            y: 16,\n            format: '{value: %e %b}'\n          },\n          gridLineWidth: 1,\n      },\n      yAxis: {\n          title: {\n              text: 'Temperature'\n          },\n          labels: {\n              formatter: function () {\n                  return this.value + '째';\n              }\n          },\n          gridLineWidth: 0\n      },\n      tooltip: {\n          crosshairs: true,\n          useHTML: true,\n          formatter: function() {\n            let result = props.forecast.list.filter(obj => {\n               return obj.dt_txt === this.x\n            })\n\n            const path = `https://openweathermap.org/img/wn/${result[0].weather[0].icon}.png`;\n            const img = `<img src = \"${path}\"/>`;\n            return (\n              '<center>' +\n                '<b>' + this.x + '</b><br />' +\n                img + '<br />' +\n                'Temperature: ' + this.y + '째< br/>' +\n              '</center>'\n            );\n          }\n      },\n      plotOptions: {\n          spline: {\n            marker: {\n              enabled: false\n            }\n          }\n      },\n      series: [{\n          name: 'Temperature',\n          data: getTemps(props.forecast.list)\n      }]\n    }\n    \n    return (\n    <Card>\n        <Card.Body>\n            <HighchartsReact\n                highcharts={Highcharts}\n                options={options}\n            />\n        </Card.Body>\n    </Card>\n    );\n}\n\nexport default CurrentWeather;\n"]},"metadata":{},"sourceType":"module"}