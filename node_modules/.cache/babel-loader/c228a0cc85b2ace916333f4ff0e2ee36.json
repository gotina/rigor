{"ast":null,"code":"var _jsxFileName = \"/Users/tbaggett/Development/rigor/src/App.js\";\nimport React from 'react';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport CurrentWeather from './components/CurrentWeather';\nimport FiveDayForecast from './components/FiveDayForecast';\nimport './App.css';\nconst APPID = '8c3e7fd0f6ec033c8ecf4379bb4cce9d';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      latitude: null,\n      longitude: null,\n      weather: null,\n      forecast: null\n    };\n\n    this.success = position => {\n      const lat = position.coords.latitude;\n      const lon = position.coords.longitude;\n      Promise.all([fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=imperial&APPID=${APPID}`), fetch(`https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&cnt=36&units=imperial&APPID=${APPID}`)]).then(async ([weather, forecast]) => {\n        const current = await weather.json();\n        const future = await forecast.json();\n        return [current, future];\n      }).then(response => {\n        this.setState({\n          weather: response[0]\n        });\n        this.setState({\n          forecast: response[1]\n        });\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n  }\n\n  componentDidMount() {\n    if (!navigator.geolocation) {// status.textContent = 'Geolocation is not supported by your browser';\n    } else {\n      // status.textContent = 'Locating…';\n      navigator.geolocation.getCurrentPosition(this.success, this.error);\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(Container, {\n      fluid: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(Col, {\n      sm: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(CurrentWeather, {\n      OWMKey: APPID,\n      weather: this.state.weather,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    })), React.createElement(Col, {\n      sm: 8,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(FiveDayForecast, {\n      OWMKey: APPID,\n      forecast: this.state.forecast,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/tbaggett/Development/rigor/src/App.js"],"names":["React","Container","Row","Col","CurrentWeather","FiveDayForecast","APPID","App","Component","state","latitude","longitude","weather","forecast","success","position","lat","coords","lon","Promise","all","fetch","then","current","json","future","response","setState","catch","err","console","log","componentDidMount","navigator","geolocation","getCurrentPosition","error","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,SAAT,EAAoBC,GAApB,EAAyBC,GAAzB,QAAoC,iBAApC;AACA,OAAOC,cAAP,MAA2B,6BAA3B;AACA,OAAOC,eAAP,MAA4B,8BAA5B;AACA,OAAO,WAAP;AAEA,MAAMC,KAAK,GAAG,kCAAd;;AAEA,MAAMC,GAAN,SAAkBP,KAAK,CAACQ,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAChCC,KADgC,GACxB;AACNC,MAAAA,QAAQ,EAAE,IADJ;AAENC,MAAAA,SAAS,EAAE,IAFL;AAGNC,MAAAA,OAAO,EAAE,IAHH;AAINC,MAAAA,QAAQ,EAAE;AAJJ,KADwB;;AAAA,SAiBhCC,OAjBgC,GAiBrBC,QAAD,IAAc;AACtB,YAAMC,GAAG,GAAGD,QAAQ,CAACE,MAAT,CAAgBP,QAA5B;AACA,YAAMQ,GAAG,GAAGH,QAAQ,CAACE,MAAT,CAAgBN,SAA5B;AAEAQ,MAAAA,OAAO,CAACC,GAAR,CAAY,CACVC,KAAK,CAAE,uDAAsDL,GAAI,QAAOE,GAAI,yBAAwBZ,KAAM,EAArG,CADK,EAEVe,KAAK,CAAE,wDAAuDL,GAAI,QAAOE,GAAI,gCAA+BZ,KAAM,EAA7G,CAFK,CAAZ,EAICgB,IAJD,CAIM,OAAM,CAACV,OAAD,EAAUC,QAAV,CAAN,KAA8B;AAClC,cAAMU,OAAO,GAAG,MAAMX,OAAO,CAACY,IAAR,EAAtB;AACA,cAAMC,MAAM,GAAG,MAAMZ,QAAQ,CAACW,IAAT,EAArB;AACA,eAAO,CAACD,OAAD,EAAUE,MAAV,CAAP;AACD,OARD,EASCH,IATD,CASOI,QAAD,IAAc;AAClB,aAAKC,QAAL,CAAc;AAAEf,UAAAA,OAAO,EAAEc,QAAQ,CAAC,CAAD;AAAnB,SAAd;AACA,aAAKC,QAAL,CAAc;AAAEd,UAAAA,QAAQ,EAAEa,QAAQ,CAAC,CAAD;AAApB,SAAd;AACD,OAZD,EAYGE,KAZH,CAYUC,GAAD,IAAS;AAChBC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,OAdD;AAeD,KApC+B;AAAA;;AAQhCG,EAAAA,iBAAiB,GAAG;AAClB,QAAI,CAACC,SAAS,CAACC,WAAf,EAA4B,CAC1B;AACD,KAFD,MAEO;AACL;AACAD,MAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyC,KAAKrB,OAA9C,EAAuD,KAAKsB,KAA5D;AACD;AACF;;AAuBDC,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AAAW,MAAA,KAAK,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAY,oBAAC,cAAD;AAAgB,MAAA,MAAM,EAAE/B,KAAxB;AAA+B,MAAA,OAAO,EAAE,KAAKG,KAAL,CAAWG,OAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAZ,CADF,EAEE,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAY,oBAAC,eAAD;AAAiB,MAAA,MAAM,EAAEN,KAAzB;AAAgC,MAAA,QAAQ,EAAE,KAAKG,KAAL,CAAWI,QAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAZ,CAFF,CADF,CADF,CADF;AAUD;;AAjD+B;;AAoDlC,eAAeN,GAAf","sourcesContent":["import React from 'react';\n\nimport { Container, Row, Col } from 'react-bootstrap'\nimport CurrentWeather from './components/CurrentWeather';\nimport FiveDayForecast from './components/FiveDayForecast';\nimport './App.css';\n\nconst APPID = '8c3e7fd0f6ec033c8ecf4379bb4cce9d';\n\nclass App extends React.Component {\n  state = {\n    latitude: null,\n    longitude: null,\n    weather: null,\n    forecast: null\n  }\n\n  componentDidMount() {\n    if (!navigator.geolocation) {\n      // status.textContent = 'Geolocation is not supported by your browser';\n    } else {\n      // status.textContent = 'Locating…';\n      navigator.geolocation.getCurrentPosition(this.success, this.error);\n    }\n  }\n\n  success = (position) => {\n    const lat = position.coords.latitude;\n    const lon = position.coords.longitude;\n\n    Promise.all([\n      fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=imperial&APPID=${APPID}`),\n      fetch(`https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&cnt=36&units=imperial&APPID=${APPID}`),\n    ])\n    .then(async([weather, forecast]) => {\n      const current = await weather.json();\n      const future = await forecast.json();\n      return [current, future]\n    })   \n    .then((response) => {\n      this.setState({ weather: response[0] });\n      this.setState({ forecast: response[1] })\n    }).catch((err) => {\n      console.log(err);\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Container fluid>\n          <Row>\n            <Col sm={4}><CurrentWeather OWMKey={APPID} weather={this.state.weather} /></Col>\n            <Col sm={8}><FiveDayForecast OWMKey={APPID} forecast={this.state.forecast}/></Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}