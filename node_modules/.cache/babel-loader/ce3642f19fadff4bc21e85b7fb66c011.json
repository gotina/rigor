{"ast":null,"code":"var _jsxFileName = \"/Users/tbaggett/Development/rigor/src/components/FiveDayForecast.js\";\nimport React from 'react';\nimport { Card, Spinner } from 'react-bootstrap';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\n\nfunction CurrentWeather(props) {\n  const ticks = [];\n\n  if (!props.forecast) {\n    return React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12\n      },\n      __self: this\n    }, React.createElement(Spinner, {\n      animation: \"border\",\n      role: \"status\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"sr-only\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14\n      },\n      __self: this\n    }, \"Loading...\")), React.createElement(Card.Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    }, \"Loading weather forecast...\")));\n  }\n\n  const extractTemps = data => {\n    const tempArray = [];\n\n    for (const property in data) {\n      tempArray.push(data[property].main.temp);\n    }\n\n    return tempArray;\n  };\n\n  const extractDates = data => {\n    const dates = [];\n\n    for (const property in data) {\n      if (data[property].dt_txt.includes(\"0:00:00\")) {\n        ticks.push(new Date(data[property].dt_txt));\n      }\n\n      dates.push(new Date(data[property].dt_txt));\n    }\n\n    console.log(\"-------\", ticks);\n    return dates;\n  };\n\n  const options = {\n    chart: {\n      type: 'spline'\n    },\n    title: {\n      text: props.forecast.city.name\n    },\n    subtitle: {\n      text: 'Hourly 5 Day Forecast'\n    },\n    xAxis: {\n      categories: extractDates(props.forecast.list),\n      tickPositions: ticks,\n      tickWidth: 0,\n      labels: {\n        align: 'left',\n        x: 3,\n        y: 16,\n        format: '{value: %e %b}'\n      },\n      showFirstLabel: false,\n      gridLineWidth: 1\n    },\n    yAxis: {\n      title: {\n        text: 'Temperature'\n      },\n      labels: {\n        formatter: function () {\n          return this.value + '°';\n        }\n      },\n      gridLineWidth: 0\n    },\n    tooltip: {\n      crosshairs: true,\n      shared: true\n    },\n    plotOptions: {\n      spline: {\n        marker: {\n          radius: 4,\n          lineColor: '#666666',\n          lineWidth: 1\n        }\n      }\n    },\n    series: [{\n      name: 'Temperature',\n      data: extractTemps(props.forecast.list)\n    }]\n  };\n  return React.createElement(Card, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, React.createElement(Card.Body, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, React.createElement(HighchartsReact, {\n    highcharts: Highcharts,\n    options: options,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  })));\n}\n\nexport default CurrentWeather;","map":{"version":3,"sources":["/Users/tbaggett/Development/rigor/src/components/FiveDayForecast.js"],"names":["React","Card","Spinner","Highcharts","HighchartsReact","CurrentWeather","props","ticks","forecast","extractTemps","data","tempArray","property","push","main","temp","extractDates","dates","dt_txt","includes","Date","console","log","options","chart","type","title","text","city","name","subtitle","xAxis","categories","list","tickPositions","tickWidth","labels","align","x","y","format","showFirstLabel","gridLineWidth","yAxis","formatter","value","tooltip","crosshairs","shared","plotOptions","spline","marker","radius","lineColor","lineWidth","series"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Card, Spinner } from 'react-bootstrap';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\n\nfunction CurrentWeather(props) {\n  const ticks = [];\n\n    if (!props.forecast) {\n        return (\n          <Card>\n            <Card.Body>\n                <Spinner animation=\"border\" role=\"status\">\n                <span className=\"sr-only\">Loading...</span>\n                </Spinner>\n                <Card.Text>Loading weather forecast...</Card.Text>\n            </Card.Body>\n          </Card>\n        )\n    }\n\n    const extractTemps = (data) => {\n      const tempArray = [];\n\n      for (const property in data) {\n        tempArray.push(data[property].main.temp);\n      }\n\n      return tempArray;\n    }\n\n    const extractDates = (data) => {\n      const dates = [];\n\n      for (const property in data) {\n        if ((data[property].dt_txt).includes(\"0:00:00\")) {\n          ticks.push(new Date(data[property].dt_txt));\n        }\n        dates.push(new Date(data[property].dt_txt));\n      }\n      console.log(\"-------\", ticks)\n      return dates;\n    }\n\n    const options = {\n        chart: {\n            type: 'spline'\n        },\n        title: {\n            text: props.forecast.city.name\n        },\n        subtitle: {\n            text: 'Hourly 5 Day Forecast'\n        },\n        xAxis: {\n            categories: extractDates(props.forecast.list),\n            tickPositions: ticks,\n            tickWidth: 0,\n            labels: {\n              align: 'left',\n              x: 3,\n              y: 16,\n              format: '{value: %e %b}'\n            },\n            showFirstLabel: false,\n            gridLineWidth: 1,\n        },\n        yAxis: {\n            title: {\n                text: 'Temperature'\n            },\n            labels: {\n                formatter: function () {\n                    return this.value + '°';\n                }\n            },\n            gridLineWidth: 0\n        },\n        tooltip: {\n            crosshairs: true,\n            shared: true\n        },\n        plotOptions: {\n            spline: {\n                marker: {\n                    radius: 4,\n                    lineColor: '#666666',\n                    lineWidth: 1\n                }\n            }\n        },\n        series: [{\n            name: 'Temperature',\n            data: extractTemps(props.forecast.list)\n        }]\n      }\n    \n    return (\n    <Card>\n        <Card.Body>\n            <HighchartsReact\n                highcharts={Highcharts}\n                options={options}\n            />\n        </Card.Body>\n    </Card>\n    );\n}\n\nexport default CurrentWeather;\n"]},"metadata":{},"sourceType":"module"}