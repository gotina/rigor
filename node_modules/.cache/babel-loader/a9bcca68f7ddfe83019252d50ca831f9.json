{"ast":null,"code":"var _jsxFileName = \"/Users/tbaggett/Development/rigor/src/components/FiveDayForecast.js\";\nimport React from 'react';\nimport { Card, Spinner } from 'react-bootstrap';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\n\nfunction CurrentWeather(props) {\n  console.log(props);\n\n  if (!props.forecast) {\n    return React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12\n      },\n      __self: this\n    }, React.createElement(Spinner, {\n      animation: \"border\",\n      role: \"status\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"sr-only\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14\n      },\n      __self: this\n    }, \"Loading...\")), React.createElement(Card.Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    }, \"Loading weather forecast...\")));\n  }\n\n  const extractTemps = data => {\n    const tempArray = [];\n\n    for (const property in data) {\n      tempArray.push(data[property].main.temp);\n    }\n\n    return tempArray;\n  };\n\n  const extractDates = data => {\n    const dates = [];\n\n    for (const property in data) {\n      dates.push(new Date(data[property].dt_txt));\n    }\n\n    return dates;\n  };\n\n  const options = {\n    chart: {\n      scrollablePlotArea: {\n        minWidth: 700\n      }\n    },\n    data: {\n      csvURL: 'https://cdn.jsdelivr.net/gh/highcharts/highcharts@v7.0.0/samples/data/analytics.csv',\n      beforeParse: function (csv) {\n        return csv.replace(/\\n\\n/g, '\\n');\n      }\n    },\n    title: {\n      text: 'Daily sessions at www.highcharts.com'\n    },\n    subtitle: {\n      text: 'Source: Google Analytics'\n    },\n    xAxis: {\n      tickInterval: 7 * 24 * 3600 * 1000,\n      // one week\n      tickWidth: 0,\n      gridLineWidth: 1,\n      labels: {\n        align: 'left',\n        x: 3,\n        y: -3\n      }\n    },\n    yAxis: [{\n      // left y axis\n      title: {\n        text: null\n      },\n      labels: {\n        align: 'left',\n        x: 3,\n        y: 16,\n        format: '{value:.,0f}'\n      },\n      showFirstLabel: false\n    }, {\n      // right y axis\n      linkedTo: 0,\n      gridLineWidth: 0,\n      opposite: true,\n      title: {\n        text: null\n      },\n      labels: {\n        align: 'right',\n        x: -3,\n        y: 16,\n        format: '{value:.,0f}'\n      },\n      showFirstLabel: false\n    }],\n    legend: {\n      align: 'left',\n      verticalAlign: 'top',\n      borderWidth: 0\n    },\n    tooltip: {\n      shared: true,\n      crosshairs: true\n    },\n    plotOptions: {\n      series: {\n        cursor: 'pointer',\n        marker: {\n          lineWidth: 1\n        }\n      }\n    },\n    series: [{\n      name: 'All sessions',\n      lineWidth: 4,\n      marker: {\n        radius: 4\n      }\n    }, {\n      name: 'New users'\n    }]\n  }; // const options = {\n  //     chart: {\n  //         type: 'spline'\n  //     },\n  //     title: {\n  //         text: props.forecast.city.name\n  //     },\n  //     subtitle: {\n  //         text: 'Hourly 5 Day Forecast'\n  //     },\n  //     xAxis: {\n  //         categories: extractDates(props.forecast.list),\n  //         labels: {\n  //           format: '{value: %e %b}'\n  //         }\n  //     },\n  //     yAxis: {\n  //         title: {\n  //             text: 'Temperature'\n  //         },\n  //         labels: {\n  //             formatter: function () {\n  //                 return this.value + 'Â°';\n  //             }\n  //         }\n  //     },\n  //     tooltip: {\n  //         crosshairs: true,\n  //         shared: true\n  //     },\n  //     plotOptions: {\n  //         spline: {\n  //             marker: {\n  //                 radius: 4,\n  //                 lineColor: '#666666',\n  //                 lineWidth: 1\n  //             }\n  //         }\n  //     },\n  //     series: [{\n  //         name: 'Temperature',\n  //         data: extractTemps(props.forecast.list)\n  //     }]\n  //   }\n\n  return React.createElement(Card, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  }, React.createElement(Card.Body, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  }, React.createElement(HighchartsReact, {\n    highcharts: Highcharts,\n    options: options,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  })));\n}\n\nexport default CurrentWeather;","map":{"version":3,"sources":["/Users/tbaggett/Development/rigor/src/components/FiveDayForecast.js"],"names":["React","Card","Spinner","Highcharts","HighchartsReact","CurrentWeather","props","console","log","forecast","extractTemps","data","tempArray","property","push","main","temp","extractDates","dates","Date","dt_txt","options","chart","scrollablePlotArea","minWidth","csvURL","beforeParse","csv","replace","title","text","subtitle","xAxis","tickInterval","tickWidth","gridLineWidth","labels","align","x","y","yAxis","format","showFirstLabel","linkedTo","opposite","legend","verticalAlign","borderWidth","tooltip","shared","crosshairs","plotOptions","series","cursor","marker","lineWidth","name","radius"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Card, Spinner } from 'react-bootstrap';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\n\nfunction CurrentWeather(props) {\n  console.log(props)\n\n    if (!props.forecast) {\n        return (\n          <Card>\n            <Card.Body>\n                <Spinner animation=\"border\" role=\"status\">\n                <span className=\"sr-only\">Loading...</span>\n                </Spinner>\n                <Card.Text>Loading weather forecast...</Card.Text>\n            </Card.Body>\n          </Card>\n        )\n    }\n\n    const extractTemps = (data) => {\n      const tempArray = [];\n\n      for (const property in data) {\n        tempArray.push(data[property].main.temp);\n      }\n\n      return tempArray;\n    }\n\n    const extractDates = (data) => {\n      const dates = [];\n\n      for (const property in data) {\n        dates.push(new Date(data[property].dt_txt));\n      }\n\n      return dates;\n    }\n\n    const options = {\n      chart: {\n        scrollablePlotArea: {\n            minWidth: 700\n        }\n    },\n\n    data: {\n        csvURL: 'https://cdn.jsdelivr.net/gh/highcharts/highcharts@v7.0.0/samples/data/analytics.csv',\n        beforeParse: function (csv) {\n            return csv.replace(/\\n\\n/g, '\\n');\n        }\n    },\n\n    title: {\n        text: 'Daily sessions at www.highcharts.com'\n    },\n\n    subtitle: {\n        text: 'Source: Google Analytics'\n    },\n\n    xAxis: {\n        tickInterval: 7 * 24 * 3600 * 1000, // one week\n        tickWidth: 0,\n        gridLineWidth: 1,\n        labels: {\n            align: 'left',\n            x: 3,\n            y: -3\n        }\n    },\n\n    yAxis: [{ // left y axis\n        title: {\n            text: null\n        },\n        labels: {\n            align: 'left',\n            x: 3,\n            y: 16,\n            format: '{value:.,0f}'\n        },\n        showFirstLabel: false\n    }, { // right y axis\n        linkedTo: 0,\n        gridLineWidth: 0,\n        opposite: true,\n        title: {\n            text: null\n        },\n        labels: {\n            align: 'right',\n            x: -3,\n            y: 16,\n            format: '{value:.,0f}'\n        },\n        showFirstLabel: false\n    }],\n\n    legend: {\n        align: 'left',\n        verticalAlign: 'top',\n        borderWidth: 0\n    },\n\n    tooltip: {\n        shared: true,\n        crosshairs: true\n    },\n\n    plotOptions: {\n        series: {\n            cursor: 'pointer',\n            marker: {\n                lineWidth: 1\n            }\n        }\n    },\n\n    series: [{\n        name: 'All sessions',\n        lineWidth: 4,\n        marker: {\n            radius: 4\n        }\n    }, {\n        name: 'New users'\n    }]\n    }\n\n    // const options = {\n    //     chart: {\n    //         type: 'spline'\n    //     },\n    //     title: {\n    //         text: props.forecast.city.name\n    //     },\n    //     subtitle: {\n    //         text: 'Hourly 5 Day Forecast'\n    //     },\n    //     xAxis: {\n    //         categories: extractDates(props.forecast.list),\n    //         labels: {\n    //           format: '{value: %e %b}'\n    //         }\n    //     },\n    //     yAxis: {\n    //         title: {\n    //             text: 'Temperature'\n    //         },\n    //         labels: {\n    //             formatter: function () {\n    //                 return this.value + 'Â°';\n    //             }\n    //         }\n    //     },\n    //     tooltip: {\n    //         crosshairs: true,\n    //         shared: true\n    //     },\n    //     plotOptions: {\n    //         spline: {\n    //             marker: {\n    //                 radius: 4,\n    //                 lineColor: '#666666',\n    //                 lineWidth: 1\n    //             }\n    //         }\n    //     },\n    //     series: [{\n    //         name: 'Temperature',\n    //         data: extractTemps(props.forecast.list)\n    //     }]\n    //   }\n    \n    return (\n    <Card>\n        <Card.Body>\n            <HighchartsReact\n                highcharts={Highcharts}\n                options={options}\n            />\n        </Card.Body>\n    </Card>\n    );\n}\n\nexport default CurrentWeather;\n"]},"metadata":{},"sourceType":"module"}